name: "GitHub Actions Demo OIDC"

on:
  workflow_dispatch:
    inputs:
      AWS_KEY_ID:
        required: true
        description: 'AWS Key ID temporarily used to create trust tokens'

      AWS_SECRET_ACCESS_KEY:
        required: true
        description: 'AWS Secret access Key temporarily used to create trust tokens'

jobs:
  AWS-Deploy-OIDC:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Creating nextjs sample application and deploying to aws s3 without storing secrets"
      - name: checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      
      - name: use node.js latest
        uses: actions/setup-node@v1
        with:
          # Here we are considering the latest Node JS Version
          node-version: '14'
          check-latest: true
          registry-url: https://registry.npmjs.org/

      - name: Stacks framework code generation
        run: |
          npx create-next-app nextjs-scaffold --use-npm --example "https://github.com/vercel/next-learn/tree/master/basics/learn-starter"
          cp -r nextjs-scaffold/* .
          rm -rf nextjs-scaffold
          # npm run env -- next export -o build
          # Below sed command updates the general package.json and adds next export functionality. With this npm run build command will be able to generate a out folder containing the website distribution.
          sed 's/next build/next build \&\& next export/g' package.json > package1.json; mv package1.json package.json
          
      - name: Configure git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
      - name: Commit generated code and initialize workflows
        run: |
          git add .
          git commit -m "Generate framework code and initialize workflows"
          git push 
          # We cant push to main since its protected in this stack

      ### These steps ideally should be done in a deploy workflow, and referenced here
      
      - name: npm install, build, and test
        run: |
          npm install
          npm run build 
          npm run test
    
    
    
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ github.event.inputs.AWS_KEY_ID }}
          aws-secret-access-key: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Trust provider in AWS
        # run:  echo "Web app is installed and you can access here http://${{ env.BUCKET.s3 }}-website.${{ env.REGION }}.amazonaws.com"
        run: |
          ex +'/BEGIN CERTIFICATE/,/END CERTIFICATE/p' <(echo | openssl s_client -servername vstoken.actions.githubusercontent.com -showcerts -connect vstoken.actions.githubusercontent.com:443) -scq > certfile.crt
          openssl x509 -in certfile.crt -fingerprint -noout  | sed 's/://g' | sed 's/SHA1 Fingerprint=//g' > tp.txt
          aws iam list-open-id-connect-providers > providers.txt  
          if grep -R "vstoken.actions.githubusercontent.com" providers.txt
          then
            grep -R "vstoken.actions.githubusercontent.com" providers.txt>matchedproviders.txt
            head -1 matchedproviders.txt | grep "vstoken.actions.githubusercontent.com" | sed 's/"Arn": "//g' | sed 's/providers.txt.*arn/arn/g' | sed 's/"//g' > oidcarn.txt
            audience='actions-playground'
            oidcarn=`cat oidcarn.txt`
            oidcarnvalue2=`echo $oidcarn`
            aws iam add-client-id-to-open-id-connect-provider --client-id $audience --open-id-connect-provider-arn $oidcarnvalue2
            echo "exists"
          else
            value=`cat tp.txt`
            aws iam create-open-id-connect-provider --url https://vstoken.actions.githubusercontent.com --thumbprint-list $value --client-id-list https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
            grep -R "vstoken.actions.githubusercontent.com" providers.txt>con.txt
            head -1 con.txt | grep "vstoken.actions.githubusercontent.com" | sed 's/"Arn": "//g' | sed 's/providers.txt.*arn/arn/g' | sed 's/"//g'  > oidcarn.txt
          fi  
            # accept role name && also handle case where role exists
          oidcarnvalue1=`cat oidcarn.txt`
          oidcarnvalue=`echo $oidcarnvalue1`
          git checkout 
          au=${{ github.repository }}
          aurepo=https://github.com/${{ github.repository }}
          echo $au
          echo $aurepo
          cat ./trust-policy.json | sed  -e "s|OIDCPROVIDER|$oidcarnvalue|"  | sed -e "s|AUDIENCE|$au|" | sed -e "s|AUDREPO|$aurepo|" > temptrust.json
          # cat ./trust-policy.json | sed 's@OIDCPROVIDER@'"$oidcarnvalue"'@'  | sed 's@AUDIENCE@'"$au"'@'  | sed 's@AUDREPO@'"$aurepo"'@'  > temptrust.json
          cat ./temptrust.json
          # TODO Handle condition where role already exists
          aws iam create-role --role-name ${{ secrets.AWS_ROLE_NAME }} --assume-role-policy-document file://temptrust.json &
          wait
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --role-name ${{ secrets.AWS_ROLE_NAME }}
          aws iam get-role --role-name ${{ secrets.AWS_ROLE_NAME }} > rolearnop.json
          echo "`jq '.Role.Arn' rolearnop.json `" > rolearn.txt
          content=`cat ./rolearn.txt`
          echo "ROLE_ARN=$content" >> $GITHUB_ENV
          # rm temptrust.json
          # rm oidcarn.txt
          # rm rolearn.txt
          # rm rolearnop.json
          # rm providers.txt
            
        
      ################### Steps mentioned in this block would later be moved to the cloudâ€™s login action ####################### 
      - uses: actions/setup-node@v2
      - run: npm install @actions/core@1.6.0-beta.0 
      - uses: actions/github-script@v4
        id: idtoken
        with:
        # Audience field is optional. By default, the value is the repo's url. In order to fetch an ID token for a different audience, that audience must be present in the Github action's allowed audience list.
          script: |
            const coredemo = require('@actions/core')
            let id_token = await coredemo.getIDToken()   
            coredemo.setOutput('id_token', id_token)

      # Get credentials. Change --role-arn value to your role arn

      - name: Get temp credentials using id token. 
        run: |
          CREDENTIALS=$(aws sts assume-role-with-web-identity  --role-arn ${{ env.ROLE_ARN }} --role-session-name 'samplerolesession' --web-identity-token ${{ steps.idtoken.outputs.id_token }} --query Credentials)
          AID=$(echo $CREDENTIALS | jq -rc '.AccessKeyId')
          AKEY=$(echo $CREDENTIALS | jq -rc '.SecretAccessKey')
          STOKEN=$(echo $CREDENTIALS | jq -rc '.SessionToken')
          echo ::add-mask::$AID && echo ::add-mask::$AKEY && echo ::add-mask::$STOKEN
          echo ::set-output name=ACCESSID::$AID && echo ::set-output name=ACCESSKEY::$AKEY && echo ::set-output name=SESSIONTOKEN::$STOKEN
        id: credentials  
       
       ###########################################################################################################
           
      # Runs a set of commands using the runners shell
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1

        with:
          aws-access-key-id: ${{ steps.credentials.outputs.ACCESSID }}
          aws-secret-access-key: ${{ steps.credentials.outputs.ACCESSKEY }}
          aws-session-token: ${{ steps.credentials.outputs.SESSIONTOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Creating a bucket in s3
        env:
          USE_BUCKET: ${{ secrets.USE_EXISTING_BUCKET }}
        if: "env.USE_BUCKET == 'false'"
        run : aws s3 mb s3://${{ secrets.AWS_S3_BUCKET_NAME }} 

      - name: Updaing bucket policy
        env:
          USE_BUCKET: ${{ secrets.USE_EXISTING_BUCKET }}
        if: "env.USE_BUCKET == 'false'"
        run: aws s3api put-bucket-policy --bucket ${{ secrets.AWS_S3_BUCKET_NAME }} --policy '{"Statement":[{"Effect":"Allow","Principal":"*","Action":"s3:GetObject","Resource":"arn:aws:s3:::${{ secrets.AWS_S3_BUCKET_NAME }}/*"}]}'
        
      - name: Uploading files to s3
        run: aws s3 sync ./out s3://${{ secrets.AWS_S3_BUCKET_NAME }}/ 

      - name: setting index and error files
        run: aws s3 website s3://${{ secrets.AWS_S3_BUCKET_NAME }}/ --index-document index.html --error-document 404.html

      - name: Get the URL to your website
        env:
          BUCKET: ${{ secrets.AWS_S3_BUCKET_NAME }}
          REGION: ${{ secrets.AWS_REGION }}
        # run:  echo "Web app is installed and you can access here http://${{ env.BUCKET.s3 }}-website.${{ env.REGION }}.amazonaws.com"
        run: |
          git checkout 
          echo -e "\n\nWeb app is installed and you can access here http://${{ env.BUCKET }}.s3-website.${{ env.REGION }}.amazonaws.com" >> README.md
          git add .
          git commit -m "Added URL to Readme."
          git push 

      - name: Persist OIDC enabled ROLE ARN
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'AWS_S3_ROLE_ARN'
          value: ${{ env.ROLE_ARN }}
          token: ${{ secrets.AWS_S3_ROLE_ARN }}
